-- PLUS 2: Consider a river system as a main river and all the tributary rivers 
-- that flow into it, and their respective tributary rivers and so on. 
-- Present a table that shows the names of the rivers of the longest branch(es)* 
-- of each river system and the total length of each shown branch, as well as the number 
-- of rivers in each and the rank of the number of rivers in the branch. Start from the 
-- rivers the Nile, Amazonas, Yangtze, Rhein, Donau and Mississippi and explore from there. 
-- You are allowed to hard-code the names of those rivers.

-- * Longest, in terms of the number of rivers in the displayed branch. 
-- For example, the longest branch of Yangtze has two rivers so include 
-- all branches of the Yangtze with 2 rivers.


WITH RECURSIVE river_path AS (
    -- base case
    SELECT 
        r.name,             -- name of tributary river
        main_r.length + r.length AS total_length,       -- store main_river length in total_length
        ARRAY[r.river, r.name]::character varying[] AS visited,
        1 AS rank
    FROM 
        river r
    JOIN
        river main_r ON main_r.name = r.river       -- join with row for main river (r.river: Nile, Amazonas, etc...)
    WHERE 
        r.river IN ('Nile', 'Amazonas', 'Yangtze', 'Rhein', 'Donau', 'Mississippi') -- Hardcode starting main rivers
    
    UNION ALL

    -- Recursive case: find branches 
    SELECT 
        r.name,
        rp.total_length + r.length AS total_length,       -- add 
        rp.visited || r.name AS visited,
        rp.rank + 1 AS rank
    FROM 
        river_path rp
    JOIN
        river r ON r.river = rp.name 
    WHERE 
        NOT r.name = ANY (rp.visited)
),

longest_branches AS (
    SELECT 
        rp.visited[1] AS main_river,
        rp.name,
        rp.total_length,
        rp.rank,
        rp.visited,
        array_length(rp.visited, 1) AS river_count
    FROM 
        river_path rp
),

maximum_ranks AS (
    SELECT  
        lb.main_river,
        MAX(rank) AS max_rank
    FROM 
        longest_branches lb
    GROUP BY 
        lb.main_river
)

SELECT
    lb.rank AS rank,
    array_to_string(lb.visited, ' - ') AS river_path,
    lb.river_count AS numRivers,
    lb.total_length AS total_length
FROM 
    longest_branches lb
JOIN    
    maximum_ranks mr ON mr.max_rank = lb.rank AND mr.main_river = lb.visited[1]
ORDER BY 
    lb.rank, lb.total_length DESC;