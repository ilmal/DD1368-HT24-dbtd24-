WITH RECURSIVE FriendChain AS (
    -- Base case: start with Anas
    SELECT
        U.UserID AS user_id,
        U.name AS name,
        ARRAY[U.UserID] AS visited,     -- array with userID as a visited list (only 20 rn)
        -- depth = how far from first user we are
        1 AS depth          -- depth 1 as basecase -> used for sorting and LEAD
    FROM
        Users U
    WHERE
        U.UserID = 20       -- userID is 20 only

    -- joinar rader
    UNION ALL

    -- Recursive case: find friends of the current user
    SELECT
        F.FriendID AS user_id,      -- find friendIDs 
        U.name AS name,             
        visited || F.FriendID AS visited,   -- add friendID to visited
        depth + 1 AS depth                  -- add 1 to current depth
    FROM
        FriendChain FC                      -- from subquery basecase
    JOIN
        Friend F ON F.UserID = FC.user_id   -- joins friend with FC using userID
    JOIN
        Users U ON U.UserID = F.FriendID    -- joins users with FC using userID and friendID
    WHERE
        NOT F.FriendID = ANY(visited)  -- Avoid cycles, no visited friendIDs can be used again
)

SELECT
    name,       
    user_id,
    -- choose userID from next row based on depth and put as friend_id on current row
    LEAD(user_id) OVER (ORDER BY depth) AS friend_id    
FROM
    FriendChain
-- sort by depth 
ORDER BY
    depth;
